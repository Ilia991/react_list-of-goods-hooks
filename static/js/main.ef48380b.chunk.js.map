{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","goods","sortValue","reverseValue","newGoods","sort","a","b","ALPHABET","localeCompare","LENGTH","length","reverse","getGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAiCE,IAAME,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EA/BR,SACEA,EACAC,EACAC,GAEA,IAAMC,EAAQ,YAAOH,GAmBrB,OAjBAG,EAASC,MAAK,SAACC,EAAGC,GAChB,OAAQL,GACN,KAAMV,EAASgB,SACb,OAAOF,EAAEG,cAAcF,GAEzB,KAAMf,EAASkB,OACb,OAAOJ,EAAEK,OAASJ,EAAEI,OAEtB,QACE,OAAO,MAITR,GACFC,EAASQ,UAGJR,EAOOS,CAASpB,EAAiBI,EAAUE,GAElD,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYnB,IAAaL,EAASgB,WAEtCS,QAAS,WACPnB,EAAYN,EAASgB,WARzB,iCAcA,wBACEO,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYnB,IAAaL,EAASkB,SAEtCO,QAAS,WACPnB,EAAYN,EAASkB,SARzB,4BAcA,wBACEK,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAA2B,IAAfjB,IAEhBkB,QAAS,WACPjB,GAAeD,IARnB,qBAcCF,GAAYE,EACX,wBACEgB,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPnB,EAAYN,EAASI,MACrBI,GAAc,IALlB,mBAWA,gCAIJ,6BACE,6BACGC,EAAMiB,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,cCtHpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ef48380b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nfunction getGoods(\n  goods:string[],\n  sortValue:SortType,\n  reverseValue:boolean,\n) {\n  const newGoods = [...goods];\n\n  newGoods.sort((a, b) => {\n    switch (sortValue) {\n      case (SortType.ALPHABET):\n        return a.localeCompare(b);\n\n      case (SortType.LENGTH):\n        return a.length - b.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (reverseValue) {\n    newGoods.reverse();\n  }\n\n  return newGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const goods = getGoods(goodsFromServer, sortType, isReversed);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={() => {\n            setSortType(SortType.ALPHABET);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={() => {\n            setSortType(SortType.LENGTH);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning',\n            { 'is-light': isReversed !== true },\n          )}\n          onClick={() => {\n            setIsReversed(!isReversed);\n          }}\n        >\n          Reverse\n        </button>\n\n        {sortType || isReversed ? (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortType(SortType.NONE);\n              setIsReversed(false);\n            }}\n          >\n            Reset\n          </button>\n        ) : (\n          <></>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {goods.map(good => (\n            <li data-cy=\"Good\" key={good}>{good}</li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}